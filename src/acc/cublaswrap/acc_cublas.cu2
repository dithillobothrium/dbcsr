#if defined(__ACC_CUBLAS)
#include <cublas.h>
#endif

#include "stdio.h"

#include <thrust/reduce.h>
#include <thrust/execution_policy.h>

__global__ void matrixMultiplicationKernel(double* A, double* B, double* C, int m, int n, int k) {

  int ROW = blockIdx.x*blockDim.x+threadIdx.x;
  int COL = blockIdx.y*blockDim.y+threadIdx.y;

  double tmpSum = 0;

  //  if (ROW < m && COL < n) {
  if (ROW == 0 && COL == 0) {
    // each thread computes one element of the block sub-matrix
    //    for (int i = 0; i < k; i++) {
    for (int i = 1; i < 2; i++) {
      //      tmpSum += A[ROW + i * m] * B[i + COL * k];
      //      tmpSum += A[ROW + i * m];
      tmpSum += B[i + COL * k];
    }
  }
  C[ROW + COL * m] = tmpSum;
}


void matrixMultiplication(double *A, double *B, double *C, int m, int n, int k){

  // declare the number of blocks per grid and the number of threads per block
  // use 1 to 512 threads per block
  dim3 threadsPerBlock(m, n);
  dim3 blocksPerGrid(1, 1);

  matrixMultiplicationKernel<<<blocksPerGrid,threadsPerBlock>>>(A, B, C, m, n, k);
}

extern "C" int acc_dgemm (int m, int n, int k, int transa, int transb, 
                          void *a_data, int a_lb, void *b_data, int b_lb, void *c_data, int c_lb, void *stream)
{
#if defined(__ACC_CUBLAS)
  static int count = 0;
  cudaStream_t* custream = (cudaStream_t*) stream;
  double *a = (double*)a_data;
  double *b = (double*)b_data;
  double *c = (double*)c_data;

  // Check transposity
  char transa_char = 'N'; if (transa!=0) transa_char = 'T';
  char transb_char = 'N'; if (transb!=0) transb_char = 'T';

  count++;
  if (count<5) return(-1);
  printf("%d\n", count);

  //  double result4 = thrust::reduce(thrust::device, c, c+(m*n));

  //  cublasInit();
  //  cudaDeviceSynchronize();
  cublasGetError(); // Clear error
  cublasSetKernelStream(*custream);  
  cublasDgemm(transa_char, transb_char, m, n, k, 1.0, a, m, b, k, 0.0, c, m);
  //  double result5 = thrust::reduce(thrust::device, c, c+(m*n));
  //  matrixMultiplication(a,b,c,m,n,k);
  int status = cublasGetError();
  if (status != CUBLAS_STATUS_SUCCESS) return(-1);
  //  cudaError_t cErr = cudaStreamSynchronize(*custream);
  //  cudaDeviceSynchronize();

  //  double result = thrust::reduce(thrust::device, a, a+(m*k));
  //  double result2 = thrust::reduce(thrust::device, b, b+(k*n));
  //  double result3 = thrust::reduce(thrust::device, c, c+(m*n));
  //  printf("alfio %d %d %d %f %f %f %f %f \n", m, n, k, result, result2, result4, result3, result5);

  //  cublasDgemm('N', 'N', m, n, k, 0.0, a, m, b, k, 0.0, c, m);

  //  cublasShutdown();

  return(0); 
#else
  return(-1);
#endif
}

